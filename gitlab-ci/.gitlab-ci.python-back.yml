stages:
  - style-check
  - build
  - test
  - deploy

variables:
  DOCKER_DRIVER: overlay2
  GIT_CLEAN_FLAGS: -ffdx -e pytest-report.xml

test:style:
  stage: style-check
  allow_failure: true
  before_script:
    - apk update && apk add python3-dev python3 build-base
    - pip3 install -r requirements.txt
  script:
    - python3 manage.py stylecheck

build:
  stage: build
  image: docker:latest
  services:
    - docker:19.03.8-dind
  before_script:
    - docker login -u "$CI_REGISTRY_USER" -p "$CI_REGISTRY_PASSWORD" $CI_REGISTRY
  script:
    - docker build --pull -t "$CI_REGISTRY_IMAGE:$CI_COMMIT_SHORT_SHA" .
    - docker push "$CI_REGISTRY_IMAGE:$CI_COMMIT_SHORT_SHA"
    - docker tag "$CI_REGISTRY_IMAGE:$CI_COMMIT_SHORT_SHA" "$CI_REGISTRY_IMAGE:latest"
    - docker push "$CI_REGISTRY_IMAGE:latest"
  only:
    - develop

test:pytest:
  stage: test
  before_script:
    - apk update && apk add python3 python3-dev build-base libffi-dev openssl-dev libgcc postgresql-dev libpq
    - pip3 install -r requirements.txt
  script:
    - pytest --cov-report xml:pytest-report.xml
  artifacts:
    paths:
    - pytest-report.xml
    expire_in: 1 hour

test:sonar:commit:
  stage: test
  image:
    name: sonarsource/sonar-scanner-cli:latest
    entrypoint: [""]
  variables:
    SONAR_TOKEN: "$SONAR_TOKEN"
    SONAR_HOST_URL: "https://sonarqube.site/"
  script:
    - sonar-scanner -Dsonar.qualitygate.wait=true -Dsonar.login=$SONAR_TOKEN -Dsonar.projectKey=back-projecnt-name -Dsonar.branch.name=$CI_COMMIT_REF_NAME -Dsonar.python.coverage.reportPaths=pytest-report.xml
  allow_failure: true
  when: delayed
  start_in: 1m 30s

test:sonar:pull_request:
  stage: test
  image:
    name: sonarsource/sonar-scanner-cli:latest
    entrypoint: [""]
  variables:
    SONAR_TOKEN: "$SONAR_TOKEN"
    SONAR_HOST_URL: "https://sonarqube.site/"
  script:
    - sonar-scanner -Dsonar.qualitygate.wait=true -Dsonar.login=$SONAR_TOKEN -Dsonar.projectKey=back-projecnt-name -Dsonar.pullrequest.key=$CI_MERGE_REQUEST_ID -Dsonar.pullrequest.branch=$CI_MERGE_REQUEST_SOURCE_BRANCH_NAME -Dsonar.pullrequest.base=$CI_MERGE_REQUEST_TARGET_BRANCH_NAME
  allow_failure: true
  only:
    - merge_requests

deploy_dev:
  stage: deploy
  before_script:
    - apk update && apk add openssh-client bash
    - eval $(ssh-agent -s)
    - bash -c 'ssh-add <(echo "$SSH_PRIVATE_KEY")'
    - mkdir -p ~/.ssh && chmod 700 ~/.ssh
  script:
    - scp -o StrictHostKeyChecking=no ./.devops/docker-compose.yml gitlab@$DEV_SERVER:~/ && scp -rp -o StrictHostKeyChecking=no ./.devops/.env.dev gitlab@$DEV_SERVER:~/.env
    - ssh-keyscan -t rsa "$DEV_SERVER" >> ~/.ssh/known_hosts && chmod 644 ~/.ssh/known_hosts
    - ssh gitlab@$DEV_SERVER "docker login -u "$CI_REGISTRY_USER" -p "$CI_REGISTRY_PASSWORD" $CI_REGISTRY && docker-compose down -v && docker-compose pull service-name && docker-compose up -d service-name"
    - ssh gitlab@$DEV_SERVER docker-compose exec -T service-name -c "DJANGO_SUPERUSER_PASSWORD=qwerty python3 manage.py createsuperuser --username admin-username --email admin@server.com --no-input"
  only:
    - develop

deploy_staging:
  stage: deploy
  before_script:
    - apk update && apk add openssh-client bash
    - eval $(ssh-agent -s)
    - bash -c 'ssh-add <(echo "$SSH_PRIVATE_KEY")'
    - mkdir -p ~/.ssh && chmod 700 ~/.ssh
  script:
    - scp -o StrictHostKeyChecking=no ./.devops/docker-compose.yml gitlab@$STAGE_SERVER:~/ && scp -rp -o StrictHostKeyChecking=no ./.devops/.env.stage gitlab@$DEV_SERVER:~/.env
    - ssh-keyscan -t rsa "$STAGE_SERVER" >> ~/.ssh/known_hosts && chmod 644 ~/.ssh/known_hosts
    - ssh gitlab@$STAGE_SERVER "docker login -u "$CI_REGISTRY_USER" -p "$CI_REGISTRY_PASSWORD" $CI_REGISTRY && docker-compose pull service-name && docker-compose up -d service-name"
    - ssh gitlab@$STAGE_SERVER docker-compose exec -T service-name sh -c "DJANGO_SUPERUSER_PASSWORD=qwerty python3 manage.py createsuperuser --username admin-username --email admin@server.com --no-input"
  only:
    - release

deploy_prod:
  stage: deploy
  before_script:
    - apk update && apk add openssh-client bash
    - eval $(ssh-agent -s)
    - bash -c 'ssh-add <(echo "$SSH_PRIVATE_KEY")'
    - mkdir -p ~/.ssh && chmod 700 ~/.ssh
    # adding variable with password in gitlab. If you didn't enter a password (by clicking on job in giltb pipeline and enter variable), pipline will broke.
    - docker login -u "$CI_USERNAME" -p "$password" $CI_REGISTRY
  script:
    - scp -o StrictHostKeyChecking=no ./.devops/docker-compose.yml gitlab@$PROD_HOST:~/ && scp -rp -o StrictHostKeyChecking=no ./.devops/.env.prod gitlab@$DEV_SERVER:~/.env
    - ssh-keyscan -t rsa "$HOST_SERVER" >> ~/.ssh/known_hosts && chmod 644 ~/.ssh/known_hosts
    - ssh gitlab@$HOST_SERVER "docker login -u "$CI_REGISTRY_USER" -p "$CI_REGISTRY_PASSWORD" $CI_REGISTRY && docker-compose pull service-name && docker-compose up -d service-name"
    - ssh gitlab@$HOST_SERVER docker-compose exec -T service-name sh -c "DJANGO_SUPERUSER_PASSWORD=qwerty python3 manage.py createsuperuser --username admin-username --email admin@server.com --no-input"
  when: manual
  only:
    - master