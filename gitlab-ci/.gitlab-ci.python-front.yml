stages:
  - build
  - test
  - deploy

variables:
  DOCKER_DRIVER: overlay2
  GIT_CLEAN_FLAGS: -ffdx -e pytest-report.xml

.build:
  image: docker:latest
  services:
    - docker:19.03.8-dind
  before_script:
    - docker login -u "$CI_REGISTRY_USER" -p "$CI_REGISTRY_PASSWORD" $CI_REGISTRY
  script:
    - docker build --pull -t "$CI_REGISTRY_IMAGE:$CI_COMMIT_SHORT_SHA" --build-arg $BACKEND_URL .
    - docker push "$CI_REGISTRY_IMAGE:$CI_COMMIT_SHORT_SHA"
    - docker tag "$CI_REGISTRY_IMAGE:$CI_COMMIT_SHORT_SHA" "$CI_REGISTRY_IMAGE:latest"
    - docker push "$CI_REGISTRY_IMAGE:latest"

build:dev:
  stage: build
  extends: .build
  variables:
    BACKEND_URL: http://example1.site/api
  only:
    - develop

build:stage:
  stage: build
  extends: .build
  variables:
    BACKEND_URL: http://example2.site/api
  only:
    - release

build:prod:
  stage: build
  extends: .build
  variables:
    BACKEND_URL: http://example3.site/api
  only:
    - master

test:sonar:commit:
  stage: test
  image:
    name: sonarsource/sonar-scanner-cli:latest
    entrypoint: [""]
  variables:
    SONAR_TOKEN: "$SONAR_TOKEN"
    SONAR_HOST_URL: "https://sonarqube.site/"
  script:
    - sonar-scanner -Dsonar.qualitygate.wait=true -Dsonar.login=$SONAR_TOKEN -Dsonar.projectKey=front-project-name -Dsonar.branch.name=$CI_COMMIT_REF_NAME 
  allow_failure: true
  only:
    - master
    - develop

test:sonar:pull_request:
  stage: test
  image:
    name: sonarsource/sonar-scanner-cli:latest
    entrypoint: [""]
  variables:
    SONAR_TOKEN: "$SONAR_TOKEN"
    SONAR_HOST_URL: "https://sonarqube.site/"
  script:
    - sonar-scanner -Dsonar.qualitygate.wait=true -Dsonar.login=$SONAR_TOKEN -Dsonar.projectKey=front-project-name -Dsonar.pullrequest.key=$CI_MERGE_REQUEST_ID -Dsonar.pullrequest.branch=$CI_MERGE_REQUEST_SOURCE_BRANCH_NAME -Dsonar.pullrequest.base=$CI_MERGE_REQUEST_TARGET_BRANCH_NAME 
  allow_failure: true
  only:
    - merge_requests

deploy_dev:
  stage: deploy
  before_script:
    - apk update && apk add openssh-client bash
    - eval $(ssh-agent -s)
    - bash -c 'ssh-add <(echo "$SSH_PRIVATE_KEY")'
    - mkdir -p ~/.ssh && chmod 700 ~/.ssh 
  script:
    - ssh-keyscan -t rsa "$DEV_SERVER" >> ~/.ssh/known_hosts && chmod 644 ~/.ssh/known_hosts
    - ssh gitlab@$DEV_SERVER "docker login -u "$CI_REGISTRY_USER" -p "$CI_REGISTRY_PASSWORD" $CI_REGISTRY && docker-compose pull front-service && docker-compose up -d front-service"
  only:
    - develop

deploy_staging:
  stage: deploy
  before_script:
    - apk update && apk add openssh-client bash
    - eval $(ssh-agent -s)
    - bash -c 'ssh-add <(echo "$SSH_PRIVATE_KEY")'
    - mkdir -p ~/.ssh && chmod 700 ~/.ssh
  script:
    - ssh-keyscan -t rsa "$STAGE_SERVER" >> ~/.ssh/known_hosts && chmod 644 ~/.ssh/known_hosts
    - ssh gitlab@$STAGE_SERVER "docker login -u "$CI_REGISTRY_USER" -p "$CI_REGISTRY_PASSWORD" $CI_REGISTRY && docker-compose pull front-service && docker-compose up -d front-service"
  only:
    - release

deploy_prod:
  stage: deploy
  before_script:
    - apk update && apk add openssh-client bash
    - eval $(ssh-agent -s)
    - bash -c 'ssh-add <(echo "$SSH_PRIVATE_KEY")'
    - mkdir -p ~/.ssh && chmod 700 ~/.ssh 
    # adding variable with password in gitlab. If you didn't enter a password(by clicking on job in gitlab pipeline and enter variable), pipeline will broke.
    - docker login -u "$CI_USERNAME" -p "$password" $CI_REGISTRY
  script:
    - ssh-keyscan -t rsa "$PROD_SERVER" >> ~/.ssh/known_hosts && chmod 644 ~/.ssh/known_hosts
    - ssh gitlab@$PROD_SERVER "docker login -u "$CI_REGISTRY_USER" -p "$CI_REGISTRY_PASSWORD" $CI_REGISTRY && docker-compose pull front-service && docker-compose up -d front-service"
  when: manual
  only:
    - master
